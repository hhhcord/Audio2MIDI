要求に従い、ファイル名とファイルをかけ。

要求：
    目的に沿って、クラスファイル名とクラス名を考えよ。
        目的：オーディオファイルから読み取ったinput_signal, sample_rate, BPM, 楽曲のキー, そして、メージャーかマイマーかの判別から.csvファイルを出力する。
        Bassのパートと上の帯域のパートについての二つの.csvファイルを出力する。
            .csvファイルの内容：
                index,note_name,start_time,duration,velocity,tempo
                0,A4,0,4,100,120
                1,C4,0,4,100,120
                2,E4,0,4,100,120
                3,E4,4,4,100,120
                4,G4,4,4,100,120
                5,B4,4,4,100,120
                6,F4,8,4,100,120
                7,A4,8,4,100,120
                8,C4,8,4,100,120
                9,G4,12,4,100,120
                10,B4,12,4,100,120
                11,D4,12,4,100,120
            使用できる音名の表記：
                    # Mapping of note names to MIDI numeric values.
                    NOTE_NAMES = ['C', 'D-', 'D', 'E-', 'E', 'F', 'G-', 'G', 'A-', 'A', 'B-', 'B']
                    NOTE_TO_NUMBER = {note: index for index, note in enumerate(NOTE_NAMES)}
                    NOTE_ALIASES = {'A#': 'B-', 'C#': 'D-', 'D#': 'E-', 'F#': 'G-', 'G#': 'A-'}
                    
                    @staticmethod
                    def split_note(note):
                        """Splits a musical note into its base name and octave."""
                        assert re.fullmatch(r'[A-G](#|-)?[0-7]', note), 'Invalid note format.'
                        return note[:-1], int(note[-1])
    つぎの関数で構成せよ。
        関数1：
            入力：BPM
            出力：1/16の時間
            目的：1/16の時間を 15/BPM により求める。
        関数2：
            入力：input_signal, sample_rate, 1/16の時間
            出力：1/16の周期ごとのFFTの結果(dB)
            目的：1/16の周期ごとのFFTの結果を求める。
        関数3：
            入力：1/16の周期ごとのFFTの結果(dB)
            出力：1/16の周期ごとのFFTの結果に+3dB/Oct. のフィルターを適用した結果(dB)
            目的：440HzのdBを基準にして、すべての周波数に対して3dB/Oct.のフィルターをかける。
        関数4：
            入力：楽曲のキー、メジャーかマイナーかの判別
            出力：Bassの音階の周波数(Hz)の配列(範囲：30Hzから200Hz)、上の帯域の音階の周波数(Hz)の配列(範囲：200Hzから4186Hz)
            目的：楽曲のキーの要素の音名に対応するHzを求める。(440Hzを基準、平均律により求める)、2^{n/12}で求める。
        関数5：
            入力：1/16の周期ごとのFFTの結果に3dB/Oct. のフィルターを適用した結果(dB)
            出力：Bassの音階の振幅(dB)の配列(範囲：30Hzから200Hz)、上の帯域の音階の振幅(dB)の配列(範囲：200Hzから4186Hz)
            目的：関数4を使って、1/16の周期ごとのFFTの結果に3dB/Oct. のフィルターを適用した結果から楽曲のキーの要素の音名に対応する振幅dBを求める。
        関数6：
            入力：振幅dB、閾値
            出力：真偽
            目的：振幅が閾値を超えているかどうかを判断する。
        関数7：
            入力：関数6の真偽
            出力：.csvファイルに書き込む要素
            目的：真のときvelocityを100に、偽のときvelocityを0にする。
        関数8：
            入力：Hz、楽曲のキー、メジャーかマイナーかの判別
            出力：Hzに対応する音名を返す。.csvファイルの表記を参照。
        関数9：
            目的：音名が同じでかつstart_timeとdurationの情報から連続していると判断されるときは結合する。重複を削除し、start_timeとdurationを変更する。
        すべての関数を統合した関数：
            入力：input_signal, sample_rate, BPM, 楽曲のキー, そして、メージャーかマイマーかの判別
            出力：.csvファイル
            要素の説明：
                start_time：開始時間（拍で指定）
                duration：継続時間（拍で指定）

    コメントアウトは英語でかけ。
    わかりやすい変数名にせよ。
    可読性の良いコードをかけ。
